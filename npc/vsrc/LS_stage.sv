// Generated by CIRCT firtool-1.56.0
module LS_stage(	// @[<stdin>:963:3]
  input         clock,	// @[<stdin>:964:11]
                reset,	// @[<stdin>:965:11]
  input  [1:0]  LS_IO_st_type,	// @[playground/src/LS_stage.scala:7:12]
  input  [2:0]  LS_IO_ld_type,	// @[playground/src/LS_stage.scala:7:12]
  input         LS_IO_ebreak_flag,	// @[playground/src/LS_stage.scala:7:12]
  input  [1:0]  LS_IO_wb_sel,	// @[playground/src/LS_stage.scala:7:12]
  input         LS_IO_wen,	// @[playground/src/LS_stage.scala:7:12]
  input  [4:0]  LS_IO_rd,	// @[playground/src/LS_stage.scala:7:12]
  input  [31:0] LS_IO_src2,	// @[playground/src/LS_stage.scala:7:12]
                LS_IO_result,	// @[playground/src/LS_stage.scala:7:12]
                LS_IO_nextpc,	// @[playground/src/LS_stage.scala:7:12]
                LS_IO_pc,	// @[playground/src/LS_stage.scala:7:12]
  output        LS_to_wb_ebreak_flag,	// @[playground/src/LS_stage.scala:7:12]
                LS_to_wb_wen,	// @[playground/src/LS_stage.scala:7:12]
  output [4:0]  LS_to_wb_rd,	// @[playground/src/LS_stage.scala:7:12]
  output [31:0] LS_to_wb_result,	// @[playground/src/LS_stage.scala:7:12]
                LS_to_wb_nextpc	// @[playground/src/LS_stage.scala:7:12]
);

  reg  [31:0] casez_tmp;	// @[playground/src/LS_stage.scala:27:47]
  wire [31:0] sram_data;	// @[playground/src/LS_stage.scala:11:31]
  always_comb begin	// @[playground/src/LS_stage.scala:27:47]
    casez (LS_IO_wb_sel)	// @[playground/src/LS_stage.scala:27:47]
      2'b00:
        casez_tmp = LS_IO_result;	// @[playground/src/LS_stage.scala:27:47]
      2'b01:
        casez_tmp = sram_data;	// @[playground/src/LS_stage.scala:11:31, :27:47]
      2'b10:
        casez_tmp = LS_IO_pc + 32'h4;	// @[playground/src/LS_stage.scala:27:47, :30:24]
      default:
        casez_tmp = 32'h0;	// @[playground/src/LS_stage.scala:27:47]
    endcase	// @[playground/src/LS_stage.scala:27:47]
  end // always_comb
  dpi_ls dpi_ls (	// @[playground/src/LS_stage.scala:12:20]
    .clock    (clock),
    .reset    (reset),
    .ls_valid ((|LS_IO_st_type) & (|LS_IO_ld_type)),	// @[playground/src/LS_stage.scala:15:{44,51,74}]
    .st_wen   (|LS_IO_st_type),	// @[playground/src/LS_stage.scala:15:44]
    .raddr    (LS_IO_result),
    .wmask    (LS_IO_st_type),
    .waddr    (LS_IO_result),
    .wdata    (LS_IO_src2),
    .rdata    (sram_data)
  );
  assign LS_to_wb_ebreak_flag = LS_IO_ebreak_flag;	// @[<stdin>:963:3]
  assign LS_to_wb_wen = LS_IO_wen;	// @[<stdin>:963:3]
  assign LS_to_wb_rd = LS_IO_rd;	// @[<stdin>:963:3]
  assign LS_to_wb_result = casez_tmp;	// @[<stdin>:963:3, playground/src/LS_stage.scala:27:47]
  assign LS_to_wb_nextpc = LS_IO_nextpc;	// @[<stdin>:963:3]
endmodule

