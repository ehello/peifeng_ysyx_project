// Generated by CIRCT firtool-1.56.0
// Standard header to adapt well known macros to our needs.

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifndef PRINTF_COND_
  `ifdef PRINTF_COND
    `define PRINTF_COND_ (`PRINTF_COND)
  `else  // PRINTF_COND
    `define PRINTF_COND_ 1
  `endif // PRINTF_COND
`endif // not def PRINTF_COND_

module IF_stage(	// @[<stdin>:78:3]
  input         clock,	// @[<stdin>:79:11]
                reset,	// @[<stdin>:80:11]
                IF_IO_valid,	// @[playground/src/IF_stage.scala:7:12]
  input  [31:0] IF_IO_bits_nextpc,	// @[playground/src/IF_stage.scala:7:12]
                IF_IO_bits_pc,	// @[playground/src/IF_stage.scala:7:12]
  input         IF_to_id_ready,	// @[playground/src/IF_stage.scala:7:12]
                IF_for_id_flush,	// @[playground/src/IF_stage.scala:7:12]
                IF_for_ex_flush,	// @[playground/src/IF_stage.scala:7:12]
                IF_r_valid,	// @[playground/src/IF_stage.scala:7:12]
  input  [31:0] IF_r_bits_data,	// @[playground/src/IF_stage.scala:7:12]
  output        IF_IO_ready,	// @[playground/src/IF_stage.scala:7:12]
                IF_to_id_valid,	// @[playground/src/IF_stage.scala:7:12]
  output [31:0] IF_to_id_bits_nextpc,	// @[playground/src/IF_stage.scala:7:12]
                IF_to_id_bits_pc,	// @[playground/src/IF_stage.scala:7:12]
                IF_to_id_bits_inst	// @[playground/src/IF_stage.scala:7:12]
);

  wire        if_inst_is_valid = IF_r_valid;	// @[playground/src/IF_stage.scala:17:38]
  wire        if_ready_go = if_inst_is_valid;	// @[playground/src/IF_stage.scala:17:38, :25:33]
  reg         resetnReg;	// @[playground/src/IF_stage.scala:18:34]
  wire        if_flush = IF_for_ex_flush | IF_for_id_flush;	// @[playground/src/IF_stage.scala:21:30, :22:30]
  reg         if_valid;	// @[playground/src/IF_stage.scala:24:33]
  wire        _IF_IO_ready_output =
    (~if_valid | if_ready_go & IF_to_id_ready) & resetnReg;	// @[playground/src/IF_stage.scala:18:34, :24:33, :25:33, :27:{19,29,44,64}]
  wire [31:0] if_inst = IF_r_valid ? IF_r_bits_data : 32'h0;	// @[playground/src/IF_stage.scala:16:36, :37:18, :38:12]
  always @(posedge clock) begin	// @[<stdin>:79:11]
    if (reset) begin	// @[<stdin>:79:11]
      resetnReg <= 1'h0;	// @[playground/src/IF_stage.scala:18:34]
      if_valid <= 1'h0;	// @[playground/src/IF_stage.scala:18:34, :24:33]
    end
    else begin	// @[<stdin>:79:11]
      resetnReg <= 1'h1;	// @[playground/src/IF_stage.scala:7:12, :18:34]
      if (_IF_IO_ready_output)	// @[playground/src/IF_stage.scala:27:64]
        if_valid <= IF_IO_valid;	// @[playground/src/IF_stage.scala:24:33]
    end
  end // always @(posedge)
  assign IF_IO_ready = _IF_IO_ready_output;	// @[<stdin>:78:3, playground/src/IF_stage.scala:27:64]
  assign IF_to_id_valid = ~if_flush & if_valid & if_ready_go;	// @[<stdin>:78:3, playground/src/IF_stage.scala:21:30, :24:33, :25:33, :31:22]
  assign IF_to_id_bits_nextpc = IF_IO_bits_nextpc;	// @[<stdin>:78:3]
  assign IF_to_id_bits_pc = IF_IO_bits_pc;	// @[<stdin>:78:3]
  assign IF_to_id_bits_inst = if_inst;	// @[<stdin>:78:3, playground/src/IF_stage.scala:16:36]
endmodule

