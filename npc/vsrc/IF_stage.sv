// Generated by CIRCT firtool-1.56.0
module IF_stage(	// @[<stdin>:11:3]
  input         clock,	// @[<stdin>:12:11]
                reset,	// @[<stdin>:13:11]
  output [31:0] io_pc,	// @[playground/src/IF_stage.scala:6:12]
                io_nextpc,	// @[playground/src/IF_stage.scala:6:12]
                io_inst	// @[playground/src/IF_stage.scala:6:12]
);

  reg  [31:0] REGpc;	// @[playground/src/IF_stage.scala:16:20]
  wire [31:0] dnpc = REGpc;	// @[playground/src/IF_stage.scala:16:20, :19:26]
  wire [31:0] snpc = REGpc + 32'h4;	// @[playground/src/IF_stage.scala:16:20, :18:26, :30:14]
  always @(posedge clock) begin	// @[<stdin>:12:11]
    if (reset)	// @[<stdin>:12:11]
      REGpc <= 32'h7FFFFFFC;	// @[playground/src/IF_stage.scala:16:20]
    else	// @[<stdin>:12:11]
      REGpc <= dnpc;	// @[playground/src/IF_stage.scala:16:20, :19:26]
  end // always @(posedge)
  fetch_inst fetch_inst (	// @[playground/src/IF_stage.scala:17:24]
    .clock  (clock),
    .reset  (reset),
    .pc     (REGpc),	// @[playground/src/IF_stage.scala:16:20]
    .nextpc (dnpc),	// @[playground/src/IF_stage.scala:19:26]
    .inst   (io_inst)
  );
  assign io_pc = REGpc;	// @[<stdin>:11:3, playground/src/IF_stage.scala:16:20]
  assign io_nextpc = dnpc;	// @[<stdin>:11:3, playground/src/IF_stage.scala:19:26]
endmodule

