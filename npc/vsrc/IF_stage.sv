// Generated by CIRCT firtool-1.56.0
module IF_stage(	// @[<stdin>:3:3]
  input         clock,	// @[<stdin>:4:11]
                reset,	// @[<stdin>:5:11]
                IF_to_id_ready,	// @[playground/src/IF_stage.scala:7:12]
                IF_for_id_Br_J_taken,	// @[playground/src/IF_stage.scala:7:12]
  input  [31:0] IF_for_id_Br_J_target,	// @[playground/src/IF_stage.scala:7:12]
  input         IF_for_id_flush,	// @[playground/src/IF_stage.scala:7:12]
  input  [31:0] IF_for_ex_epc_target,	// @[playground/src/IF_stage.scala:7:12]
  input         IF_for_ex_epc_taken,	// @[playground/src/IF_stage.scala:7:12]
                IF_for_ex_Br_B_taken,	// @[playground/src/IF_stage.scala:7:12]
  input  [31:0] IF_for_ex_Br_B_target,	// @[playground/src/IF_stage.scala:7:12]
  input         IF_for_ex_flush,	// @[playground/src/IF_stage.scala:7:12]
                IF_ar_ready,	// @[playground/src/IF_stage.scala:7:12]
                IF_r_valid,	// @[playground/src/IF_stage.scala:7:12]
  input  [31:0] IF_r_bits_data,	// @[playground/src/IF_stage.scala:7:12]
  input  [1:0]  IF_r_bits_resp,	// @[playground/src/IF_stage.scala:7:12]
  input         IF_aw_ready,	// @[playground/src/IF_stage.scala:7:12]
                IF_w_ready,	// @[playground/src/IF_stage.scala:7:12]
                IF_b_valid,	// @[playground/src/IF_stage.scala:7:12]
  input  [1:0]  IF_b_bits_resp,	// @[playground/src/IF_stage.scala:7:12]
  output        IF_to_id_valid,	// @[playground/src/IF_stage.scala:7:12]
  output [31:0] IF_to_id_bits_nextpc,	// @[playground/src/IF_stage.scala:7:12]
                IF_to_id_bits_pc,	// @[playground/src/IF_stage.scala:7:12]
                IF_to_id_bits_inst,	// @[playground/src/IF_stage.scala:7:12]
  output        IF_ar_valid,	// @[playground/src/IF_stage.scala:7:12]
  output [31:0] IF_ar_bits_addr,	// @[playground/src/IF_stage.scala:7:12]
  output [2:0]  IF_ar_bits_prot,	// @[playground/src/IF_stage.scala:7:12]
  output        IF_r_ready,	// @[playground/src/IF_stage.scala:7:12]
                IF_aw_valid,	// @[playground/src/IF_stage.scala:7:12]
  output [31:0] IF_aw_bits_addr,	// @[playground/src/IF_stage.scala:7:12]
  output [2:0]  IF_aw_bits_prot,	// @[playground/src/IF_stage.scala:7:12]
  output        IF_w_valid,	// @[playground/src/IF_stage.scala:7:12]
  output [31:0] IF_w_bits_data,	// @[playground/src/IF_stage.scala:7:12]
  output [7:0]  IF_w_bits_strb,	// @[playground/src/IF_stage.scala:7:12]
  output        IF_b_ready	// @[playground/src/IF_stage.scala:7:12]
);

  wire        _IF_r_ready_output = 1'h1;	// @[<stdin>:3:3, playground/src/IF_stage.scala:33:11]
  wire        if_flush = IF_for_ex_flush | IF_for_id_flush;	// @[playground/src/IF_stage.scala:26:30, :27:29]
  reg         if_valid;	// @[playground/src/IF_stage.scala:29:33]
  wire        inst_is_valid;	// @[playground/src/IF_stage.scala:24:35]
  wire        if_ready_go = inst_is_valid & IF_to_id_ready;	// @[playground/src/IF_stage.scala:24:35, :30:33, :31:19]
  reg  [31:0] if_pc;	// @[playground/src/IF_stage.scala:42:26]
  wire [31:0] if_snpc = if_pc + 32'h4;	// @[playground/src/IF_stage.scala:42:26, :43:33, :49:20]
  wire [31:0] if_dnpc =
    IF_for_ex_epc_taken
      ? IF_for_ex_epc_target
      : IF_for_id_Br_J_taken ? IF_for_id_Br_J_target : IF_for_ex_Br_B_target;	// @[playground/src/IF_stage.scala:39:17, :44:33, :50:17]
  wire [31:0] if_nextpc =
    IF_for_id_Br_J_taken | IF_for_ex_Br_B_taken | IF_for_ex_epc_taken ? if_dnpc : if_snpc;	// @[playground/src/IF_stage.scala:43:33, :44:33, :45:33, :51:{18,28}]
  reg         arvalidReg;	// @[playground/src/IF_stage.scala:56:25]
  reg  [31:0] araddrReg;	// @[playground/src/IF_stage.scala:57:24]
  reg         ReadRequstState;	// @[playground/src/IF_stage.scala:60:30]
  assign inst_is_valid = _IF_r_ready_output & IF_r_valid;	// @[<stdin>:3:3, playground/src/IF_stage.scala:24:35, src/main/scala/chisel3/util/Decoupled.scala:52:35]
  wire [31:0] if_inst = inst_is_valid ? IF_r_bits_data : 32'h0;	// @[playground/src/IF_stage.scala:24:35, :47:36, :83:18, :84:12]
  wire        _GEN = ReadRequstState & IF_ar_ready;	// @[playground/src/IF_stage.scala:60:30, :67:45, :68:22, :69:22]
  always @(posedge clock) begin	// @[<stdin>:4:11]
    if (reset) begin	// @[<stdin>:4:11]
      if_valid <= 1'h0;	// @[playground/src/IF_stage.scala:29:33]
      if_pc <= 32'h7FFFFFFC;	// @[playground/src/IF_stage.scala:42:26]
      arvalidReg <= 1'h0;	// @[playground/src/IF_stage.scala:29:33, :56:25]
      araddrReg <= 32'h0;	// @[playground/src/IF_stage.scala:47:36, :57:24]
      ReadRequstState <= 1'h0;	// @[playground/src/IF_stage.scala:29:33, :60:30]
    end
    else begin	// @[<stdin>:4:11]
      if_valid <= 1'h1;	// @[playground/src/IF_stage.scala:29:33, :33:11]
      if (if_ready_go)	// @[playground/src/IF_stage.scala:30:33]
        if_pc <= if_nextpc;	// @[playground/src/IF_stage.scala:42:26, :45:33]
      arvalidReg <= ~ReadRequstState | ~_GEN & arvalidReg;	// @[playground/src/IF_stage.scala:56:25, :60:30, :61:{23,33}, :65:17, :67:45, :68:22, :69:22, :70:17]
      if (ReadRequstState) begin	// @[playground/src/IF_stage.scala:60:30]
      end
      else	// @[playground/src/IF_stage.scala:60:30]
        araddrReg <= if_nextpc;	// @[playground/src/IF_stage.scala:45:33, :57:24]
      ReadRequstState <= ~ReadRequstState | ~_GEN & ReadRequstState;	// @[playground/src/IF_stage.scala:60:30, :61:{23,33}, :63:22, :67:45, :68:22, :69:22]
    end
  end // always @(posedge)
  assign IF_to_id_valid = ~if_flush & if_valid & if_ready_go;	// @[<stdin>:3:3, playground/src/IF_stage.scala:26:30, :29:33, :30:33, :34:22]
  assign IF_to_id_bits_nextpc = if_nextpc;	// @[<stdin>:3:3, playground/src/IF_stage.scala:45:33]
  assign IF_to_id_bits_pc = if_pc;	// @[<stdin>:3:3, playground/src/IF_stage.scala:42:26]
  assign IF_to_id_bits_inst = if_inst;	// @[<stdin>:3:3, playground/src/IF_stage.scala:47:36]
  assign IF_ar_valid = arvalidReg;	// @[<stdin>:3:3, playground/src/IF_stage.scala:56:25]
  assign IF_ar_bits_addr = araddrReg;	// @[<stdin>:3:3, playground/src/IF_stage.scala:57:24]
  assign IF_ar_bits_prot = 3'h0;	// @[<stdin>:3:3, playground/src/IF_stage.scala:76:18]
  assign IF_r_ready = _IF_r_ready_output;	// @[<stdin>:3:3]
  assign IF_aw_valid = 1'h0;	// @[<stdin>:3:3, playground/src/IF_stage.scala:29:33]
  assign IF_aw_bits_addr = 32'h0;	// @[<stdin>:3:3, playground/src/IF_stage.scala:47:36]
  assign IF_aw_bits_prot = 3'h0;	// @[<stdin>:3:3, playground/src/IF_stage.scala:76:18]
  assign IF_w_valid = 1'h0;	// @[<stdin>:3:3, playground/src/IF_stage.scala:29:33]
  assign IF_w_bits_data = 32'h0;	// @[<stdin>:3:3, playground/src/IF_stage.scala:47:36]
  assign IF_w_bits_strb = 8'h0;	// @[<stdin>:3:3, playground/src/IF_stage.scala:91:17]
  assign IF_b_ready = 1'h0;	// @[<stdin>:3:3, playground/src/IF_stage.scala:29:33]
endmodule

