// Generated by CIRCT firtool-1.56.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module PS2Keyboard(	// <stdin>:3:3
  input        clock,	// <stdin>:4:11
               reset,	// <stdin>:5:11
               keyboard_ps2_clk,	// playground/src/SimTop.scala:59:20
               keyboard_ps2_data,	// playground/src/SimTop.scala:59:20
  output [7:0] keyboard_out	// playground/src/SimTop.scala:59:20
);

  reg       buffer_0;	// playground/src/SimTop.scala:66:23
  reg       buffer_1;	// playground/src/SimTop.scala:66:23
  reg       buffer_2;	// playground/src/SimTop.scala:66:23
  reg       buffer_3;	// playground/src/SimTop.scala:66:23
  reg       buffer_4;	// playground/src/SimTop.scala:66:23
  reg       buffer_5;	// playground/src/SimTop.scala:66:23
  reg       buffer_6;	// playground/src/SimTop.scala:66:23
  reg       buffer_7;	// playground/src/SimTop.scala:66:23
  reg       buffer_8;	// playground/src/SimTop.scala:66:23
  reg       buffer_9;	// playground/src/SimTop.scala:66:23
  reg [3:0] count;	// playground/src/SimTop.scala:68:22
  reg [2:0] ps2_clk_sync;	// playground/src/SimTop.scala:69:29
  reg [8:0] Part;	// playground/src/SimTop.scala:71:21
  always @(posedge clock) begin	// <stdin>:4:11
    if (reset) begin	// <stdin>:4:11
      buffer_0 <= 1'h0;	// <stdin>:3:3, playground/src/SimTop.scala:66:23
      buffer_1 <= 1'h0;	// <stdin>:3:3, playground/src/SimTop.scala:66:23
      buffer_2 <= 1'h0;	// <stdin>:3:3, playground/src/SimTop.scala:66:23
      buffer_3 <= 1'h0;	// <stdin>:3:3, playground/src/SimTop.scala:66:23
      buffer_4 <= 1'h0;	// <stdin>:3:3, playground/src/SimTop.scala:66:23
      buffer_5 <= 1'h0;	// <stdin>:3:3, playground/src/SimTop.scala:66:23
      buffer_6 <= 1'h0;	// <stdin>:3:3, playground/src/SimTop.scala:66:23
      buffer_7 <= 1'h0;	// <stdin>:3:3, playground/src/SimTop.scala:66:23
      buffer_8 <= 1'h0;	// <stdin>:3:3, playground/src/SimTop.scala:66:23
      buffer_9 <= 1'h0;	// <stdin>:3:3, playground/src/SimTop.scala:66:23
      count <= 4'h0;	// playground/src/SimTop.scala:68:22
      ps2_clk_sync <= 3'h0;	// playground/src/SimTop.scala:69:29
      Part <= 9'h0;	// playground/src/SimTop.scala:71:21
    end
    else begin	// <stdin>:4:11
      automatic logic sampling;	// playground/src/SimTop.scala:76:34
      automatic logic _GEN;	// playground/src/SimTop.scala:78:16
      sampling = ps2_clk_sync[2] & ~(ps2_clk_sync[1]);	// playground/src/SimTop.scala:69:29, :76:{30,34,36,49}
      _GEN = count == 4'hA;	// playground/src/SimTop.scala:68:22, :78:16
      if (~sampling | _GEN | (|count)) begin	// playground/src/SimTop.scala:66:23, :68:22, :76:34, :77:18, :78:{16,26}, :84:21
      end
      else	// playground/src/SimTop.scala:66:23, :77:18, :78:26
        buffer_0 <= keyboard_ps2_data;	// playground/src/SimTop.scala:66:23
      if (~sampling | _GEN | count != 4'h1) begin	// playground/src/SimTop.scala:66:23, :68:22, :76:34, :77:18, :78:{16,26}, :84:21
      end
      else	// playground/src/SimTop.scala:66:23, :77:18, :78:26
        buffer_1 <= keyboard_ps2_data;	// playground/src/SimTop.scala:66:23
      if (~sampling | _GEN | count != 4'h2) begin	// playground/src/SimTop.scala:66:23, :68:22, :76:34, :77:18, :78:{16,26}, :84:21
      end
      else	// playground/src/SimTop.scala:66:23, :77:18, :78:26
        buffer_2 <= keyboard_ps2_data;	// playground/src/SimTop.scala:66:23
      if (~sampling | _GEN | count != 4'h3) begin	// playground/src/SimTop.scala:66:23, :68:22, :76:34, :77:18, :78:{16,26}, :84:21
      end
      else	// playground/src/SimTop.scala:66:23, :77:18, :78:26
        buffer_3 <= keyboard_ps2_data;	// playground/src/SimTop.scala:66:23
      if (~sampling | _GEN | count != 4'h4) begin	// playground/src/SimTop.scala:66:23, :68:22, :76:34, :77:18, :78:{16,26}, :84:21
      end
      else	// playground/src/SimTop.scala:66:23, :77:18, :78:26
        buffer_4 <= keyboard_ps2_data;	// playground/src/SimTop.scala:66:23
      if (~sampling | _GEN | count != 4'h5) begin	// playground/src/SimTop.scala:66:23, :68:22, :76:34, :77:18, :78:{16,26}, :84:21
      end
      else	// playground/src/SimTop.scala:66:23, :77:18, :78:26
        buffer_5 <= keyboard_ps2_data;	// playground/src/SimTop.scala:66:23
      if (~sampling | _GEN | count != 4'h6) begin	// playground/src/SimTop.scala:66:23, :68:22, :76:34, :77:18, :78:{16,26}, :84:21
      end
      else	// playground/src/SimTop.scala:66:23, :77:18, :78:26
        buffer_6 <= keyboard_ps2_data;	// playground/src/SimTop.scala:66:23
      if (~sampling | _GEN | count != 4'h7) begin	// playground/src/SimTop.scala:66:23, :68:22, :76:34, :77:18, :78:{16,26}, :84:21
      end
      else	// playground/src/SimTop.scala:66:23, :77:18, :78:26
        buffer_7 <= keyboard_ps2_data;	// playground/src/SimTop.scala:66:23
      if (~sampling | _GEN | count != 4'h8) begin	// playground/src/SimTop.scala:66:23, :68:22, :76:34, :77:18, :78:{16,26}, :84:21
      end
      else	// playground/src/SimTop.scala:66:23, :77:18, :78:26
        buffer_8 <= keyboard_ps2_data;	// playground/src/SimTop.scala:66:23
      if (~sampling | _GEN | count != 4'h9) begin	// playground/src/SimTop.scala:66:23, :68:22, :76:34, :77:18, :78:{16,26}, :84:21
      end
      else	// playground/src/SimTop.scala:66:23, :77:18, :78:26
        buffer_9 <= keyboard_ps2_data;	// playground/src/SimTop.scala:66:23
      if (sampling) begin	// playground/src/SimTop.scala:76:34
        if (_GEN)	// playground/src/SimTop.scala:78:16
          count <= 4'h0;	// playground/src/SimTop.scala:68:22
        else	// playground/src/SimTop.scala:78:16
          count <= count + 4'h1;	// playground/src/SimTop.scala:68:22, :84:21, :85:22
      end
      ps2_clk_sync <= {ps2_clk_sync[1:0], keyboard_ps2_clk};	// playground/src/SimTop.scala:69:29, :74:{22,35}
      if (sampling & _GEN & ~buffer_0 & keyboard_ps2_data
          & (buffer_1 ^ buffer_2 ^ buffer_3 ^ buffer_4 ^ buffer_5 ^ buffer_6 ^ buffer_7
             ^ buffer_8 ^ buffer_9))	// playground/src/SimTop.scala:66:23, :67:48, :71:21, :76:34, :77:18, :78:{16,26}, :79:{23,68}, :80:14
        Part <=
          {buffer_9,
           buffer_8,
           buffer_7,
           buffer_6,
           buffer_5,
           buffer_4,
           buffer_3,
           buffer_2,
           buffer_1};	// playground/src/SimTop.scala:66:23, :71:21, :80:20
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// <stdin>:3:3
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:3:3
      `FIRRTL_BEFORE_INITIAL	// <stdin>:3:3
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:3:3
      automatic logic [31:0] _RANDOM[0:1];	// <stdin>:3:3
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:3:3
        `INIT_RANDOM_PROLOG_	// <stdin>:3:3
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:3:3
        for (logic [1:0] i = 2'h0; i < 2'h2; i += 2'h1) begin
          _RANDOM[i[0]] = `RANDOM;	// <stdin>:3:3
        end	// <stdin>:3:3
        buffer_0 = _RANDOM[1'h0][0];	// <stdin>:3:3, playground/src/SimTop.scala:66:23
        buffer_1 = _RANDOM[1'h0][1];	// <stdin>:3:3, playground/src/SimTop.scala:66:23
        buffer_2 = _RANDOM[1'h0][2];	// <stdin>:3:3, playground/src/SimTop.scala:66:23
        buffer_3 = _RANDOM[1'h0][3];	// <stdin>:3:3, playground/src/SimTop.scala:66:23
        buffer_4 = _RANDOM[1'h0][4];	// <stdin>:3:3, playground/src/SimTop.scala:66:23
        buffer_5 = _RANDOM[1'h0][5];	// <stdin>:3:3, playground/src/SimTop.scala:66:23
        buffer_6 = _RANDOM[1'h0][6];	// <stdin>:3:3, playground/src/SimTop.scala:66:23
        buffer_7 = _RANDOM[1'h0][7];	// <stdin>:3:3, playground/src/SimTop.scala:66:23
        buffer_8 = _RANDOM[1'h0][8];	// <stdin>:3:3, playground/src/SimTop.scala:66:23
        buffer_9 = _RANDOM[1'h0][9];	// <stdin>:3:3, playground/src/SimTop.scala:66:23
        count = _RANDOM[1'h0][13:10];	// <stdin>:3:3, playground/src/SimTop.scala:66:23, :68:22
        ps2_clk_sync = _RANDOM[1'h0][16:14];	// <stdin>:3:3, playground/src/SimTop.scala:66:23, :69:29
        Part = {_RANDOM[1'h0][31:25], _RANDOM[1'h1][1:0]};	// <stdin>:3:3, playground/src/SimTop.scala:66:23, :71:21
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:3:3
      `FIRRTL_AFTER_INITIAL	// <stdin>:3:3
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign keyboard_out = Part[7:0];	// <stdin>:3:3, playground/src/SimTop.scala:71:21, :72:16
endmodule

module bcd7seg(	// <stdin>:71:3, :108:3, :145:3, :182:3
  input  [3:0] seg_in,	// playground/src/SimTop.scala:41:15
  output [6:0] seg_out	// playground/src/SimTop.scala:41:15
);

  wire [15:0][6:0] _GEN =
    {7'hE,
     7'h6,
     7'h21,
     7'h46,
     7'h3,
     7'h8,
     7'h10,
     7'h0,
     7'h78,
     7'h2,
     7'h12,
     7'h19,
     7'h30,
     7'h24,
     7'h79,
     7'h40};	// playground/src/SimTop.scala:45:36
  assign seg_out = _GEN[seg_in];	// <stdin>:71:3, :108:3, :145:3, :182:3, playground/src/SimTop.scala:45:36
endmodule

module SimTop(	// <stdin>:219:3
  input        clock,	// <stdin>:220:11
               reset,	// <stdin>:221:11
               io_ps2_clk,	// playground/src/SimTop.scala:6:14
               io_ps2_data,	// playground/src/SimTop.scala:6:14
  output [6:0] io_seg1,	// playground/src/SimTop.scala:6:14
               io_seg2,	// playground/src/SimTop.scala:6:14
               io_seg5,	// playground/src/SimTop.scala:6:14
               io_seg6	// playground/src/SimTop.scala:6:14
);

  wire [6:0] _bcd7seg2_seg_out;	// playground/src/SimTop.scala:16:24
  wire [6:0] _bcd7seg1_seg_out;	// playground/src/SimTop.scala:15:24
  wire [7:0] _PS2Key_keyboard_out;	// playground/src/SimTop.scala:14:24
  PS2Keyboard PS2Key (	// playground/src/SimTop.scala:14:24
    .clock             (clock),
    .reset             (reset),
    .keyboard_ps2_clk  (io_ps2_clk),
    .keyboard_ps2_data (io_ps2_data),
    .keyboard_out      (_PS2Key_keyboard_out)
  );
  bcd7seg bcd7seg1 (	// playground/src/SimTop.scala:15:24
    .seg_in  (_PS2Key_keyboard_out[3:0]),	// playground/src/SimTop.scala:14:24, :22:41
    .seg_out (_bcd7seg1_seg_out)
  );
  bcd7seg bcd7seg2 (	// playground/src/SimTop.scala:16:24
    .seg_in  (_PS2Key_keyboard_out[7:4]),	// playground/src/SimTop.scala:14:24, :23:41
    .seg_out (_bcd7seg2_seg_out)
  );
  assign io_seg1 = _bcd7seg1_seg_out;	// <stdin>:219:3, playground/src/SimTop.scala:15:24
  assign io_seg2 = _bcd7seg2_seg_out;	// <stdin>:219:3, playground/src/SimTop.scala:16:24
  assign io_seg5 = _bcd7seg1_seg_out;	// <stdin>:219:3, playground/src/SimTop.scala:15:24
  assign io_seg6 = _bcd7seg2_seg_out;	// <stdin>:219:3, playground/src/SimTop.scala:16:24
endmodule

