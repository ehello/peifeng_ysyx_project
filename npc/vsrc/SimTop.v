// Generated by CIRCT firtool-1.56.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module bcd7seg(	// <stdin>:3:3, :40:3
  input  [3:0] seg_in,	// playground/src/SimTop.scala:24:15
  output [6:0] seg_out	// playground/src/SimTop.scala:24:15
);

  wire [15:0][6:0] _GEN =
    {7'h7,
     7'h3,
     7'h21,
     7'h6,
     7'h42,
     7'h31,
     7'h10,
     7'h0,
     7'h78,
     7'h2,
     7'h12,
     7'h19,
     7'h30,
     7'h24,
     7'h79,
     7'h40};	// playground/src/SimTop.scala:28:36
  assign seg_out = _GEN[seg_in];	// <stdin>:3:3, :40:3, playground/src/SimTop.scala:28:36
endmodule

module SimTop(	// <stdin>:77:3
  input        clock,	// <stdin>:78:11
               reset,	// <stdin>:79:11
               io_in,	// playground/src/SimTop.scala:5:14
  output [6:0] io_seg1,	// playground/src/SimTop.scala:5:14
               io_seg2	// playground/src/SimTop.scala:5:14
);

  reg [7:0] reg_0;	// playground/src/SimTop.scala:10:19
  always @(posedge clock) begin	// <stdin>:78:11
    if (reset)	// <stdin>:78:11
      reg_0 <= 8'h40;	// playground/src/SimTop.scala:10:19
    else if (io_in)	// playground/src/SimTop.scala:5:14
      reg_0 <= {reg_0[0] + reg_0[2] + reg_0[3] + reg_0[4], reg_0[6:0]};	// playground/src/SimTop.scala:10:19, :11:{14,21,28,31,35}, :13:{15,22}
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// <stdin>:77:3
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:77:3
      `FIRRTL_BEFORE_INITIAL	// <stdin>:77:3
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:77:3
      automatic logic [31:0] _RANDOM[0:0];	// <stdin>:77:3
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:77:3
        `INIT_RANDOM_PROLOG_	// <stdin>:77:3
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:77:3
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// <stdin>:77:3
        reg_0 = _RANDOM[/*Zero width*/ 1'b0][7:0];	// <stdin>:77:3, playground/src/SimTop.scala:10:19
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:77:3
      `FIRRTL_AFTER_INITIAL	// <stdin>:77:3
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  bcd7seg bcd7seg1 (	// playground/src/SimTop.scala:15:24
    .seg_in  (reg_0[3:0]),	// playground/src/SimTop.scala:10:19, :17:25
    .seg_out (io_seg1)
  );
  bcd7seg bcd7seg2 (	// playground/src/SimTop.scala:16:24
    .seg_in  (reg_0[7:4]),	// playground/src/SimTop.scala:10:19, :18:25
    .seg_out (io_seg2)
  );
endmodule

