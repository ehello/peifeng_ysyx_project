// Generated by CIRCT firtool-1.56.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module SimTop(	// <stdin>:3:3
  input        clock,	// <stdin>:4:11
               reset,	// <stdin>:5:11
               keyboard_ps2_clk,	// playground/src/SimTop.scala:59:20
               keyboard_ps2_data,	// playground/src/SimTop.scala:59:20
  output [7:0] keyboard_out,	// playground/src/SimTop.scala:59:20
               keyboard_num	// playground/src/SimTop.scala:59:20
);

  reg  [3:0] count;	// playground/src/SimTop.scala:67:22
  reg  [2:0] ps2_clk_sync;	// playground/src/SimTop.scala:68:29
  wire [7:0] _GEN = {4'h0, count};	// playground/src/SimTop.scala:67:22, :85:16
  always @(posedge clock) begin	// <stdin>:4:11
    if (reset) begin	// <stdin>:4:11
      count <= 4'h0;	// playground/src/SimTop.scala:67:22
      ps2_clk_sync <= 3'h0;	// playground/src/SimTop.scala:68:29
    end
    else begin	// <stdin>:4:11
      if (ps2_clk_sync[2] & ~(ps2_clk_sync[1])) begin	// playground/src/SimTop.scala:68:29, :70:{30,34,36,49}
        if (count == 4'hA)	// playground/src/SimTop.scala:67:22, :74:16
          count <= 4'h0;	// playground/src/SimTop.scala:67:22
        else	// playground/src/SimTop.scala:74:16
          count <= count + 4'h1;	// playground/src/SimTop.scala:67:22, :82:22
      end
      ps2_clk_sync <= {ps2_clk_sync[1:0], keyboard_ps2_clk};	// playground/src/SimTop.scala:68:29, :69:{22,35}
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_	// <stdin>:3:3
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:3:3
      `FIRRTL_BEFORE_INITIAL	// <stdin>:3:3
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:3:3
      automatic logic [31:0] _RANDOM[0:0];	// <stdin>:3:3
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:3:3
        `INIT_RANDOM_PROLOG_	// <stdin>:3:3
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:3:3
        _RANDOM[/*Zero width*/ 1'b0] = `RANDOM;	// <stdin>:3:3
        count = _RANDOM[/*Zero width*/ 1'b0][13:10];	// <stdin>:3:3, playground/src/SimTop.scala:67:22
        ps2_clk_sync = _RANDOM[/*Zero width*/ 1'b0][16:14];	// <stdin>:3:3, playground/src/SimTop.scala:67:22, :68:29
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:3:3
      `FIRRTL_AFTER_INITIAL	// <stdin>:3:3
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign keyboard_out = _GEN;	// <stdin>:3:3, playground/src/SimTop.scala:85:16
  assign keyboard_num = _GEN;	// <stdin>:3:3, playground/src/SimTop.scala:85:16
endmodule

