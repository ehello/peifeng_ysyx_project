// Generated by CIRCT firtool-1.56.0
module Axi4Lite_Sram_Bridge(	// @[<stdin>:1550:3]
  input         clock,	// @[<stdin>:1551:11]
                reset,	// @[<stdin>:1552:11]
                io_ar_valid,	// @[playground/src/Sram.scala:6:12]
  input  [31:0] io_ar_bits_addr,	// @[playground/src/Sram.scala:6:12]
  input         io_aw_valid,	// @[playground/src/Sram.scala:6:12]
                io_w_valid,	// @[playground/src/Sram.scala:6:12]
  input  [31:0] io_w_bits_data,	// @[playground/src/Sram.scala:6:12]
  input  [7:0]  io_w_bits_strb,	// @[playground/src/Sram.scala:6:12]
  output        io_r_valid,	// @[playground/src/Sram.scala:6:12]
  output [31:0] io_r_bits_data,	// @[playground/src/Sram.scala:6:12]
  output        io_b_valid	// @[playground/src/Sram.scala:6:12]
);

  reg readDataValidReg;	// @[playground/src/Sram.scala:18:31]
  reg writeRespValidReg;	// @[playground/src/Sram.scala:36:32]
  always @(posedge clock) begin	// @[<stdin>:1551:11]
    if (reset) begin	// @[<stdin>:1551:11]
      readDataValidReg <= 1'h0;	// @[playground/src/Sram.scala:9:25, :18:31]
      writeRespValidReg <= 1'h0;	// @[playground/src/Sram.scala:9:25, :36:32]
    end
    else begin	// @[<stdin>:1551:11]
      readDataValidReg <= io_ar_valid;	// @[playground/src/Sram.scala:18:31]
      writeRespValidReg <= io_aw_valid & io_w_valid;	// @[playground/src/Sram.scala:36:32, :37:18]
    end
  end // always @(posedge)
  dpi_sram dpi_sram (	// @[playground/src/Sram.scala:7:22]
    .clock (clock),
    .addr  (io_ar_bits_addr),
    .wdata (io_w_bits_data),
    .wmask (io_w_bits_strb),
    .req   (io_ar_valid | io_aw_valid & io_w_valid),	// @[playground/src/Sram.scala:16:{31,46}]
    .wr    (io_aw_valid & io_w_valid),	// @[playground/src/Sram.scala:11:31]
    .rdata (io_r_bits_data)
  );
  assign io_r_valid = readDataValidReg;	// @[<stdin>:1550:3, playground/src/Sram.scala:18:31]
  assign io_b_valid = writeRespValidReg;	// @[<stdin>:1550:3, playground/src/Sram.scala:36:32]
endmodule

